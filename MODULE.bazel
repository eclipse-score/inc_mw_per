# *******************************************************************************
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0
#
# SPDX-License-Identifier: Apache-2.0
# *******************************************************************************
module(
    name = "score_persistency",
    version = "0.1.0",
    compatibility_level = 0,
)

## Toolchains (dependencies and config)
# python
bazel_dep(name = "rules_python", version = "1.4.1")

PYTHON_VERSION = "3.12"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = PYTHON_VERSION,
)
use_repo(python)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip_score_venv_test",
    python_version = PYTHON_VERSION,
    requirements_lock = "//tests/python_test_cases:requirements.txt",
)
use_repo(pip, "pip_score_venv_test")

# rust
bazel_dep(name = "rules_rust", version = "0.65.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2024",
    versions = ["1.90.0"],
)

# LLVM Toolchains Rules - host configuration
bazel_dep(name = "rules_cc", version = "0.2.8")
bazel_dep(name = "toolchains_llvm", version = "1.5.0")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    compile_flags = {"": [
        "-Wno-error=deprecated-declarations",
        "-Wno-error=deprecated-literal-operator",
    ]},
    cxx_standard = {"": "c++17"},
    llvm_version = "21.1.0",
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

## Bazel registry
# Module dependencies
bazel_dep(name = "googletest", version = "1.17.0")
bazel_dep(name = "google_benchmark", version = "1.9.4")

## S-CORE bazel registry
bazel_dep(name = "score_tooling", version = "1.0.2")
bazel_dep(name = "aspect_rules_lint", version = "1.7.0")
bazel_dep(name = "buildifier_prebuilt", version = "8.2.0.2")

# docs-as-code
bazel_dep(name = "score_docs_as_code", version = "1.3.0")

# Module deps
bazel_dep(name = "score-baselibs", version = "0.0.0")
bazel_dep(name = "score_platform", version = "0.3.0")
bazel_dep(name = "score_process", version = "1.2.0")

## additional settings / config
crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")
crate.from_cargo(
    name = "score_persistency_crates",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        "//src/rust/rust_kvs:Cargo.toml",
        "//src/rust/rust_kvs_tool:Cargo.toml",
        "//tests/rust_test_scenarios:Cargo.toml",
    ],
)
use_repo(crate, "score_persistency_crates")

## temporary overrides / tools
# Testing utils dependency.
# Direct usage of tag in git_override reports false problem in editor, using hash of a tag
bazel_dep(name = "testing-utils")
git_override(
    module_name = "testing-utils",
    commit = "4f9f2544a7b34288d36be120fa1acf4b57859600",  # tag v0.2.3
    remote = "https://github.com/qorix-group/testing_tools.git",
)

git_override(
    module_name = "score-baselibs",
    commit = "253571652d8f8e3df6e073ad17cb0cbb688278ee",
    remote = "https://github.com/eclipse-score/baselibs.git",
)

# ToDo: needed to get //:docs running until 0.4.0 is officially released
git_override(
    module_name = "score_platform",
    commit = "64eb8acf8436c60f1a6daaf6bc67763797792838",
    remote = "https://github.com/eclipse-score/score.git",
)

# ToDo: workaround until https://github.com/eclipse-score/baselibs/issues/20 is clarified
git_override(
    module_name = "score_tooling",
    commit = "b8f58954485d8a19856a3aacdc69a6cbdd12972d",
    remote = "https://github.com/eclipse-score/tooling.git",
)
